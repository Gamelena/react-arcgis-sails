<!DOCTYPE html>
<html>
<head>
    <title><%= typeof title == 'undefined' ? 'Gamelena App' : title %></title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--

    Client-side Javascript
    ========================

    You can always bring in JS files manually with `script` tags, or asynchronously
    on the client using a solution like AMD (RequireJS).  Or, if you like, you can
    take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

    By default, files in your `assets/js` folder are included here
    automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
    CoffeeScript (.coffee) are supported. In production, your scripts will be minified
    and concatenated into a single file.

    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Change the order of your scripts
        + Import scripts from other directories
        + Use a different preprocessor, like TypeScript

  -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="https://js.arcgis.com/3.16/esri/themes/calcite/dijit/calcite.css">
    <link rel="stylesheet" href="https://js.arcgis.com/3.16/esri/css/esri.css">
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="/bower_components/jquery-validation/dist/aditional-methods.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
    <script>
        var base_url = location.protocol + "//" + location.hostname + (location.port != '80' ? ':' + location.port : "");
        var dojoConfig = {
            parseOnLoad: false,
            async: true,
            cacheBust: '0.1.0',
            packages: [
                { name: 'donors', location: base_url + '/js/donors' },
                { name: 'bower_components', location: base_url + '/bower_components' }
            ],
            aliases: [
                ['react', 'bower_components/react/react'],
                ['react-dom', 'bower_components/react/react-dom'],
                ['react-bootstrap', 'bower_components/react-bootstrap/react-bootstrap.min']
            ],
            deps: ['dojo/domReady!'],
        };
    </script>
    <script src="https://js.arcgis.com/3.16/" ></script>
    <!--
    Stylesheets and Preprocessors
    ==============================

    You can always bring in CSS files manually with `<link>` tags, or asynchronously
    using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
    of Sails' conventional asset pipeline (boilerplate Gruntfile).

    By default, stylesheets from your `assets/styles` folder are included
    here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
    are supported. In production, your styles will be minified and concatenated into
    a single file.

    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Change the order of your CSS files
        + Import stylesheets from other directories
        + Use a different or additional preprocessor, like SASS, SCSS or Stylus
-->
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <style>
        html,
        body,
        #map {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }

        #search {
            display: block;
            position: relative;
            z-index: 2;
            top: 54px;
            left: 74px;
        }

        h3 {
            text-align: center;
            margin-bottom: 0px;
        }

        header small {
            margin-left: 14px;
        }

        .error {
            color: red;
        }

    </style>
</head>

<body class="calcite" onorientationchange="orientationChanged()">
<%- body %>


<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->

</body>
</html>
